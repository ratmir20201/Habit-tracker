services:
  api:
    container_name: api
    build:
      dockerfile: api/Dockerfile
    env_file:
      - api/.env
    environment:
      TZ: ${TIMEZONE}
    command: [ "supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf" ]
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app-network
      - kafka-network

  ngrok:
    container_name: ngrok
    image: ngrok/ngrok
    restart: always
    environment:
      TZ: ${TIMEZONE}
      NGROK_AUTHTOKEN: ${NGROK__AUTHTOKEN}
    command: [ "http", "bot:8001" ]
    ports:
      - "4040:4040"
    networks:
      - bot-network

  bot:
    container_name: bot
    build:
      dockerfile: bot/Dockerfile
    restart: always
    env_file:
      - bot/.env
    environment:
      TZ: ${TIMEZONE}
    command: [ "/bin/bash", "/bot/get_ngrok_url.sh" ]
    ports:
      - "8001:8001"
    depends_on:
      - ngrok
    networks:
      - bot-network
      - app-network

  postgres:
    container_name: postgres
    image: postgres:17.2
    env_file:
      - .env
    environment:
      TZ: ${TIMEZONE}
      POSTGRES_DB: ${DB__NAME}
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      log_destination: stderr
      logging_collector: on
      log_directory: /var/lib/postgresql/data/log
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB__NAME} -U ${DB__USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${DB__PORT}:${DB__PORT}"
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    environment:
      TZ: ${TIMEZONE}
    ports:
      - "6379:6379"
    networks:
      - bot-network
      - app-network

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      TZ: ${TIMEZONE}
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper
      - zookeeper_log:/var/log/zookeeper
    networks:
      - kafka-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      TZ: ${TIMEZONE}
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_log:/var/log/kafka
    networks:
      - kafka-network

  notification:
    container_name: notification
    build:
      dockerfile: notification/Dockerfile
    env_file:
      - notification/.env
    environment:
      TZ: ${TIMEZONE}
    command: [ "python", "main.py" ]
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8002:8002"
    networks:
      - kafka-network


volumes:
  zookeeper_data:
    name: zookeeper_data
  zookeeper_log:
    name: zookeeper_log
  kafka_data:
    name: kafka_data
  kafka_log:
    name: kafka_log


networks:
  app-network:
    driver: bridge
  bot-network:
    driver: bridge
  kafka-network:
    driver: bridge