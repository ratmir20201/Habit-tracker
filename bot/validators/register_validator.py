from pydantic import ValidationError
from schemas.register import RegisterSchema

from main import tg_bot


def validate_user_data(message, data) -> RegisterSchema | None:

    try:
        user_data = RegisterSchema(**data)
        return user_data
    except ValidationError as e:
        from handlers import get_username

        errors = e.errors()
        for error in errors:
            field = error["loc"][0]
            error_message = error["msg"]

            if field == "email":
                error_message = (
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email."
                )
            elif field == "password":
                error_message = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ —Ü–∏—Ñ—Ä—É."
            tg_bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: {}".format(error_message))

        tg_bot.send_message(
            message.chat.id, "üîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        tg_bot.register_next_step_handler(message, get_username)
        return None
