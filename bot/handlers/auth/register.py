import requests

from main import tg_bot
from test_config import settings
from validators.register_validator import validate_user_data


def register(message, username: str, email: str, password: str):

    user_data = {
        "telegram_id": message.from_user.id,
        "username": username,
        "email": email,
        "password": password,
    }

    valid_user_data = validate_user_data(message, user_data)
    if valid_user_data is None:
        return

    response = requests.post(
        "{url}/auth/register".format(url=settings.api.url),
        json=valid_user_data.model_dump(),
    )

    if response.status_code == 201:
        tg_bot.send_message(
            message.chat.id,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—Ö–æ–¥–∞.",
        )
    elif response.status_code == 400:
        from handlers import get_username

        tg_bot.send_message(
            message.chat.id,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        )
        tg_bot.send_message(
            message.chat.id, "üîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        tg_bot.register_next_step_handler(message, get_username)
    else:
        tg_bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
